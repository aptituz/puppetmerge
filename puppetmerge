#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'highline/import'
require 'find'
require 'fileutils'
require 'diffy'

opts = OpenStruct.new
opts.source = '.'
opts.target = '.'
opts.copy_new = false
opts.debug = false
opts.flags = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: puppetmerge [OPTIONS] source destination"
   opt.separator  ""
   opt.separator  "Options"

   opt.on("--debug","Enable debug mode") do |arg|
     opts.debug = arg
   end
   
   opt.on("--verbose", "Be verbose") do |arg|
     opts.flags[:verbose] = arg
   end
   
   opt.on("--noop", "Do not actually do anything") do |arg|
     opts.flags[:noop] = arg
   end
   
   opt.on("--copy-new", "Copy new files without confirmation") do |arg|
     opts.copy_new = arg
   end
   
   opt.on("-s", "--source SOURCEDIR", "Specify source directory (default: $PWD)") do |s|
     opts.source = File.absolute_path(s)
   end

   opt.on("-d", "--destination DESTDIR", "Specify destination directory (default: $PWD)") do |d|
     opts.target = File.absolute_path(d)
   end
   
   opt.on("-h","--help","help") do
     puts opt_parser
   end
end

opt_parser.parse!

if opts.source == opts.target
  puts "source and target module are the same, that makes no sense"
  Kernel.exit(1)
end

unless File.directory?(opts.source)
  puts "specified source directory `%s' is not a directory" % opts.source
  Kernel.exit(1)
end

unless File.directory?(opts.target)
  puts "specified destination directory `%s' is not a directory" % opts.target
  Kernel.exit(1)
end

unless File.exists?(File.join(opts.source, "manifests", "init.pp" ))
  puts "specified source does not have an init.pp - wrong path?"
  Kernel.exit(1)
end

unless File.exists?(File.join(opts.target, "manifests", "init.pp"))
  unless agree("specified target does not have an init.pp - continue? (y|N)") { |q| q.default = "no" }
    Kernel.exit(1)
  end
end

def find_source_files(opts)
  if not block_given?
    raise ArgumentError('find_soure_files requires a block')
  end
  Find.find(opts.source) do |path|
    relpath = path.sub(opts.source + '/', '')
    otherpath = File.join(opts.target, relpath)
    if FileTest.directory?(path)
      if File.basename(path) =~ /(.svn|.git)/
        Find.prune
      end
    else
      yield path, relpath, otherpath
    end
  end
end

def copy(src, dest, flags)
  parent = File.dirname(dest)
  unless File.exist?(parent)
    FileUtils.mkdir_p(parent, flags)
  end
  FileUtils.cp(src, dest, flags)
end



Diffy::Diff.default_options.merge!(
  :source => 'files',
  :diff   => '-uw',
  :include_diff_info => true,
  :default_format => :color
)
Diffy::Diff.default_format = :color

find_source_files(opts) do |path, relpath, otherpath|
    puts "testing #{relpath} against #{otherpath}" if opts.flags[:verbose]
    if File.exists?(otherpath)      
      if FileUtils.compare_file(path, otherpath)
        puts "file identical, next" if opts.debug
        next
      else
        puts "file #{otherpath} different" if opts.debug
        puts Diffy::Diff.new(path, otherpath).diff
        #FIXME: Show diff
      end
    else
      if copy_new then
        copy(path, otherpath, flags)
      end
        
      puts "file #{relpath} not existent in destination directory" if opts.debug
    end
  end
